// <auto-generated />
using GalaxyMapSiteApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GalaxyMapSiteApi.Migrations
{
    [DbContext(typeof(GalaxyMapContext))]
    partial class GalaxyMapContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Calendar", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("AfterEpochSuffix")
                        .HasColumnType("text")
                        .HasColumnName("after_epoch_suffix");

                    b.Property<string>("BeforeEpochSuffix")
                        .HasColumnType("text")
                        .HasColumnName("before_epoch_suffix");

                    b.Property<int>("DaysPerYear")
                        .HasColumnType("integer")
                        .HasColumnName("days_per_year");

                    b.Property<int>("Epoch")
                        .HasColumnType("integer")
                        .HasColumnName("epoch");

                    b.Property<int>("HoursPerDay")
                        .HasColumnType("integer")
                        .HasColumnName("hours_per_day");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<int>("MinutesPerHour")
                        .HasColumnType("integer")
                        .HasColumnName("minutes_per_hour");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("ZeroYearAfterEpoch")
                        .HasColumnType("boolean")
                        .HasColumnName("zero_year_after_epoch");

                    b.HasKey("Id")
                        .HasName("pk_calendars");

                    b.HasIndex("InstanceId")
                        .HasDatabaseName("ix_calendars_instance_id");

                    b.ToTable("calendars", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Corporation", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organization_id");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.HasKey("InstanceId", "Id")
                        .HasName("pk_corporations");

                    b.HasIndex("InstanceId", "OrganizationId")
                        .IsUnique()
                        .HasDatabaseName("ix_corporations_instance_id_organization_id");

                    b.ToTable("corporations", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Government", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organization_id");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.HasKey("InstanceId", "Id")
                        .HasName("pk_governments");

                    b.HasIndex("InstanceId", "OrganizationId")
                        .IsUnique()
                        .HasDatabaseName("ix_governments_instance_id_organization_id");

                    b.ToTable("governments", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Instance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_instances");

                    b.ToTable("instances", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Organization", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organization_type");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.HasKey("InstanceId", "Id")
                        .HasName("pk_organizations");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.OrganizationOrganization", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("ChildId")
                        .HasColumnType("text")
                        .HasColumnName("child_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ParentId")
                        .HasColumnType("text")
                        .HasColumnName("parent_id")
                        .HasColumnOrder(2);

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("RelationshipString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship_string");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.HasKey("InstanceId", "ChildId", "ParentId")
                        .HasName("pk_organization_organizations");

                    b.HasIndex("InstanceId", "ParentId")
                        .HasDatabaseName("ix_organization_organizations_instance_id_parent_id");

                    b.ToTable("organization_organizations", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Planet", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_id");

                    b.HasKey("InstanceId", "Id")
                        .HasName("pk_planets");

                    b.HasIndex("InstanceId", "SystemId")
                        .HasDatabaseName("ix_planets_instance_id_system_id");

                    b.ToTable("planets", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.PlanetGovernment", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("ChildId")
                        .HasColumnType("text")
                        .HasColumnName("child_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ParentId")
                        .HasColumnType("text")
                        .HasColumnName("parent_id")
                        .HasColumnOrder(2);

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("RelationshipString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship_string");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.HasKey("InstanceId", "ChildId", "ParentId")
                        .HasName("pk_planet_governments");

                    b.HasIndex("InstanceId", "ParentId")
                        .HasDatabaseName("ix_planet_governments_instance_id_parent_id");

                    b.ToTable("planet_governments", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Spacelane", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("Focus")
                        .HasColumnType("text")
                        .HasColumnName("focus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.HasKey("InstanceId", "Id")
                        .HasName("pk_spacelanes");

                    b.ToTable("spacelanes", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.SpacelaneSegment", b =>
                {
                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("destination_id");

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("EndReasonString")
                        .HasColumnType("text")
                        .HasColumnName("end_reason_string");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("OriginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("origin_id");

                    b.Property<string>("SpacelaneId")
                        .HasColumnType("text")
                        .HasColumnName("spacelane_id");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("StartReasonString")
                        .HasColumnType("text")
                        .HasColumnName("start_reason_string");

                    b.HasIndex("InstanceId", "DestinationId")
                        .HasDatabaseName("ix_spacelane_segments_instance_id_destination_id");

                    b.HasIndex("InstanceId", "OriginId")
                        .HasDatabaseName("ix_spacelane_segments_instance_id_origin_id");

                    b.HasIndex("InstanceId", "SpacelaneId")
                        .HasDatabaseName("ix_spacelane_segments_instance_id_spacelane_id");

                    b.ToTable("spacelane_segments", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.System", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasColumnType("text")
                        .HasColumnName("instance_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int?>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("Focus")
                        .HasColumnType("text")
                        .HasColumnName("focus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("Sector")
                        .HasColumnType("text")
                        .HasColumnName("sector");

                    b.Property<int?>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("X")
                        .HasColumnType("integer")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("integer")
                        .HasColumnName("y");

                    b.HasKey("InstanceId", "Id")
                        .HasName("pk_solar_systems");

                    b.ToTable("solar_systems", (string)null);
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Calendar", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_calendars_instances_instance_id");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Corporation", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_corporations_instances_instance_id");

                    b.HasOne("GalaxyMapSiteApi.Models.Organization", "Organization")
                        .WithOne("Corporation")
                        .HasForeignKey("GalaxyMapSiteApi.Models.Corporation", "InstanceId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_corporations_organizations_instance_id_organization_id");

                    b.Navigation("Instance");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Government", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_governments_instances_instance_id");

                    b.HasOne("GalaxyMapSiteApi.Models.Organization", "Organization")
                        .WithOne("Government")
                        .HasForeignKey("GalaxyMapSiteApi.Models.Government", "InstanceId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_governments_organizations_instance_id_organization_id");

                    b.Navigation("Instance");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Organization", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organizations_instances_instance_id");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.OrganizationOrganization", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_organizations_instances_instance_id");

                    b.HasOne("GalaxyMapSiteApi.Models.Organization", "Child")
                        .WithMany("ParentOrganizationRelationships")
                        .HasForeignKey("InstanceId", "ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_organizations_organizations_instance_id_child_");

                    b.HasOne("GalaxyMapSiteApi.Models.Organization", "Parent")
                        .WithMany("ChildOrganizationRelationships")
                        .HasForeignKey("InstanceId", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_organizations_organizations_instance_id_parent");

                    b.Navigation("Child");

                    b.Navigation("Instance");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Planet", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planets_instances_instance_id");

                    b.HasOne("GalaxyMapSiteApi.Models.System", "System")
                        .WithMany("Planets")
                        .HasForeignKey("InstanceId", "SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planets_solar_systems_instance_id_system_id");

                    b.Navigation("Instance");

                    b.Navigation("System");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.PlanetGovernment", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planet_governments_instances_instance_id");

                    b.HasOne("GalaxyMapSiteApi.Models.Planet", "Child")
                        .WithMany()
                        .HasForeignKey("InstanceId", "ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planet_governments_planets_instance_id_child_id");

                    b.HasOne("GalaxyMapSiteApi.Models.Government", "Parent")
                        .WithMany()
                        .HasForeignKey("InstanceId", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_planet_governments_governments_instance_id_parent_id");

                    b.Navigation("Child");

                    b.Navigation("Instance");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Spacelane", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spacelanes_instances_instance_id");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.SpacelaneSegment", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spacelane_segments_instances_instance_id");

                    b.HasOne("GalaxyMapSiteApi.Models.System", "Destination")
                        .WithMany()
                        .HasForeignKey("InstanceId", "DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spacelane_segments_solar_systems_instance_id_destination_id");

                    b.HasOne("GalaxyMapSiteApi.Models.System", "Origin")
                        .WithMany()
                        .HasForeignKey("InstanceId", "OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spacelane_segments_solar_systems_instance_id_origin_id");

                    b.HasOne("GalaxyMapSiteApi.Models.Spacelane", "Spacelane")
                        .WithMany()
                        .HasForeignKey("InstanceId", "SpacelaneId")
                        .HasConstraintName("fk_spacelane_segments_spacelanes_instance_id_spacelane_id");

                    b.Navigation("Destination");

                    b.Navigation("Instance");

                    b.Navigation("Origin");

                    b.Navigation("Spacelane");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.System", b =>
                {
                    b.HasOne("GalaxyMapSiteApi.Models.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_solar_systems_instances_instance_id");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.Organization", b =>
                {
                    b.Navigation("ChildOrganizationRelationships");

                    b.Navigation("Corporation");

                    b.Navigation("Government");

                    b.Navigation("ParentOrganizationRelationships");
                });

            modelBuilder.Entity("GalaxyMapSiteApi.Models.System", b =>
                {
                    b.Navigation("Planets");
                });
#pragma warning restore 612, 618
        }
    }
}
